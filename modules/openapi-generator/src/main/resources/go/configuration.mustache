{{>partial_header}}
package {{packageName}}

import (
	"net/http"

	"golang.org/x/oauth2"
)

// BasicAuth provides basic http authentication to a request passed via context using ContextBasicAuth
type BasicAuth struct {
	UserName string `json:"userName,omitempty"`
	Password string `json:"password,omitempty"`
}

// APIKey provides API key based authentication to a request passed via context using ContextAPIKey
type APIKey struct {
	Key    string
	Prefix string
}

type Authentication struct {
	APIKey *APIKey
	BasicAuth *BasicAuth
	OAuth2 *oauth2.TokenSource
	AccessToken *string
}

type Configuration struct {
	BasePath       string            `json:"basePath,omitempty"`
	Host           string            `json:"host,omitempty"`
	Scheme         string            `json:"scheme,omitempty"`
	DefaultHeader  map[string]string `json:"defaultHeader,omitempty"`
	UserAgent      string            `json:"userAgent,omitempty"`
	Authentication Authentication    `json:"authentication,omitempty"`
	HTTPClient     *http.Client
}

func NewConfiguration() *Configuration {
	cfg := &Configuration{
		BasePath:      "{{{basePath}}}",
		DefaultHeader: make(map[string]string),
		UserAgent:     "{{#httpUserAgent}}{{{.}}}{{/httpUserAgent}}{{^httpUserAgent}}OpenAPI-Generator/{{{packageVersion}}}/go{{/httpUserAgent}}",
	}
	return cfg
}

func (c *Configuration) AddDefaultHeader(key string, value string) {
	c.DefaultHeader[key] = value
}
